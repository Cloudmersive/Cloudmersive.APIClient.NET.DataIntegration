/* 
 * Data Integration API
 *
 * Easily and directly query database backup files, convert into other file formats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.DataIntegration.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.DataIntegration.Model
{
    /// <summary>
    /// Details about a SQL Server Table
    /// </summary>
    [DataContract]
    public partial class MssqlTable :  IEquatable<MssqlTable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MssqlTable" /> class.
        /// </summary>
        /// <param name="schemaName">Name of the schema containing the table.</param>
        /// <param name="tableName">Name of the table.</param>
        public MssqlTable(string schemaName = default(string), string tableName = default(string))
        {
            this.SchemaName = schemaName;
            this.TableName = tableName;
        }
        
        /// <summary>
        /// Name of the schema containing the table
        /// </summary>
        /// <value>Name of the schema containing the table</value>
        [DataMember(Name="schemaName", EmitDefaultValue=false)]
        public string SchemaName { get; set; }

        /// <summary>
        /// Name of the table
        /// </summary>
        /// <value>Name of the table</value>
        [DataMember(Name="tableName", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MssqlTable {\n");
            sb.Append("  SchemaName: ").Append(SchemaName).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MssqlTable);
        }

        /// <summary>
        /// Returns true if MssqlTable instances are equal
        /// </summary>
        /// <param name="input">Instance of MssqlTable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MssqlTable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchemaName == input.SchemaName ||
                    (this.SchemaName != null &&
                    this.SchemaName.Equals(input.SchemaName))
                ) && 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemaName != null)
                    hashCode = hashCode * 59 + this.SchemaName.GetHashCode();
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
